#!/usr/bin/env bash
#
#/ gitmultihost - A tool for handling git repositories with multiple SSH hosts.
#/
#/ Usage:
#/   gitmultihost <git-command> [arguments...]
#/
#/   <git-command> can be any git command. If the command involves a repository URL, 
#/   gitmultihost will prompt to select an SSH host for the operation using `fzf`.
#/
#/ Examples:
#/   gitmultihost clone git@github.com:user/repo.git - Clones using a selectable SSH host
#/   gitmultihost remote set-url origin git@github.com:user/repo.git - Changes remote origin using a selectable SSH host
#/
#/ OPTIONS:
#/   -h, --help - Show this help message and exit
#/   -v, --version - Show version information and exit
#/
# gitmultihost is under a MIT style licence.
# See LICENSE for the full text.
#
# This is open source! Please feel free to contribute.
# https://github.com/jnbdz/gitmultihost

VERSION="1.0.1"

usage() {
    grep '^#/' "$0" | cut -c 4-
}

version() {
    echo "gitmultihost version $VERSION"
}

select_host() {
    grep "^Host " ~/.ssh/config | awk '{ print $2 }' | fzf --preview 'echo {}' --preview-window=down:3:hidden
}

modify_url_with_host() {
    local url="$1"
    local selected_host=$(select_host)

    if [[ -z "$selected_host" ]]; then
        echo "No host selected. Exiting." >&2
        exit 1
    fi

    if [[ "$url" =~ ^https?:// ]]; then
        url=$(echo "$url" | sed -r "s/https?:\/\/([^\/]+)/$selected_host/")
    elif [[ "$url" =~ ^git@ ]]; then
        url=$(echo "$url" | sed -r "s/git@([^:]+)/git@$selected_host/")
    else
        echo "Unsupported URL format: $url" >&2
        exit 1
    fi

    echo "$url"
}

main() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        usage
        exit 0
    elif [[ "$1" == "-v" || "$1" == "--version" ]]; then
        version
        exit 0
    else
        local cmd=("$@")
        for i in "${!cmd[@]}"; do
            if [[ "${cmd[$i]}" =~ ^git@ || "${cmd[$i]}" =~ ^https?:// ]]; then
                cmd[$i]=$(modify_url_with_host "${cmd[$i]}")
                break
            fi
        done
        git "${cmd[@]}"
    fi
}

main "$@"
